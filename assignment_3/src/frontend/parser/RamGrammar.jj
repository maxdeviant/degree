options {
    JAVA_UNICODE_ESCAPE = true;
}

PARSER_BEGIN(RamParser)
    package frontend.parser.generated;
    import java.io.FileNotFoundException;

    public class RamParser {
        public static void main(String[] args)
        throws ParseException, TokenMgrError, FileNotFoundException
        {
            if (args.length == 0) {
                RamParser parser = new RamParser( System.in ) ;
                parser.Goal();
            } else {
                java.io.InputStream is = new java.io.FileInputStream(new java.io.File(args[0]));
                RamParser parser = new RamParser( is ) ;
                parser.Goal();
            }
        }
    }
PARSER_END(RamParser)


// Insert a specification of a lexical analysis here.

SKIP : /* WHITE SPACE */
{
    " "
    | "\t"
    | "\n"
    | "\r"
    | "\f"
}

SPECIAL_TOKEN : /* COMMENTS */
{
    <SINGLE_LINE_COMMENT: "//" (~["\n","\r"])* ("\n"|"\r"|"\r\n")>
    | <FORMAL_COMMENT: "/**" (~["*"])* "*" ("*" | (~["*","/"] (~["*"])* "*"))* "/">
    | <MULTI_LINE_COMMENT: "/*" (~["*"])* "*" ("*" | (~["*","/"] (~["*"])* "*"))* "/">     // regex: http://regexpal.com/   /\*([^*])*\*(\*|([^*/]([^*])*\*))*/
}

TOKEN :
{
    < LPAREN: "(" >
    | < RPAREN: ")" >
    | < LSQPAREN: "[" >
    | < RSQPAREN: "]" >
    | < LBRACE: "{" >
    | < RBRACE: "}" >
    | < SEMICOLON: ";" >
    | < COMMA: "," >
    | < COLON: ":" >
    | < DOT: "." >
    | < ASSIGN: "=" >
    | < LESSTHAN: "<" >
    | < EQUALITY: "==" >
    | < PLUSEQUALS: "+=" >
    | < MINUSEQUALS: "-=" >
    | < PLUS: "+" >
    | < MINUS: "-" >
    | < TIMES: "*" >
    | < AND : "and" >
    | < OR : "or" >
    | < EXCLAMATION : "!" >
    | < BOOLEAN: "bool" >
    | < CLASS: "class" >
    | < ELSE: "else" >
    | < FALSE: "false" >
    | < IF: "if" >
    | < WHILE: "while" >
    | < INTEGER: "int" >
    | < LENGTH: "length" >
    | < MAIN: "main" >
    | < NEW: "new" >
    | < PUBLIC: "public" >
    | < RETURN: "return" >
    | < STATIC: "static" >
    | < STRING: "String" >
    | < THIS: "this" >
    | < TRUE: "true" >
    | < PRINT: "print" >
    | < PRINTLN: "println" >
    | < VOID: "void" >
    | < INTEGER_LITERAL: ( ["1"-"9"] (["0"-"9"])* | "0" ) >
    | < IDENTIFIER: <LETTER> (<LETTER>|<DIGIT>|"_")* >
    | < #LETTER: ["a"-"z","A"-"Z"] >
    | < #DIGIT: ["0"-"9"] >
    // | < #SUM: <EXPR>"+"<EXPR> >
    // | < EXPR: ("(" <SUM> ")") | <DIGIT>(<DIGIT>)* >
}



void Goal() :
{}
{
  /* ( RamToken() )*  <EOF> */
  Program() <EOF>
}

void RamToken():
{}
{
    <CLASS>
    | <IDENTIFIER>
    | <LBRACE>
    | <PUBLIC>
    | <STATIC>
    | <VOID>
    | <MAIN>
    | <LPAREN>
    | <STRING>
    | <LSQPAREN>
    | <RSQPAREN>
    | <RPAREN>
    | <RBRACE>
    | <PLUSEQUALS>
    | <MINUSEQUALS>
    | <SEMICOLON>
    | <RETURN>
    | <COMMA>
    | <INTEGER>
    | <BOOLEAN>
    | <ASSIGN>
    | <IF>
    | <ELSE>
    | <WHILE>
    | <COLON>
    | <PRINT>
    | <PRINTLN>
    | <AND>
    | <OR>
    | <LESSTHAN>
    | <EQUALITY>
    | <PLUS>
    | <MINUS>
    | <TIMES>
    | <DOT>
    | <LENGTH>
    | <INTEGER_LITERAL>
    | <TRUE>
    | <FALSE>
    | <THIS>
    | <NEW>
    | <EXCLAMATION>
}

void Program() :
{}
{
    MainClass() ( ClassDecl() )*
}

void MainClass() :
{}
{
    <CLASS> <IDENTIFIER> <LBRACE> <PUBLIC> <STATIC> <VOID> <MAIN> <LPAREN>
    <STRING> <LSQPAREN> <RSQPAREN> <IDENTIFIER> <RPAREN> <LBRACE>
    Statement()
    <RBRACE> <RBRACE>
}

void ClassDecl():
{}
{
    <CLASS> <IDENTIFIER> <RBRACE>
    Statement()
    <RBRACE>
}

void Statement():
{}
{
    <IDENTIFIER>
}

void Operator():
{}
{
    <AND>
    | <OR>
    | <EQUALITY>
    | <LESSTHAN>
    | <PLUS>
    | <MINUS>
    | <TIMES>
}
