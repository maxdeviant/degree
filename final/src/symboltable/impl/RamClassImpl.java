package symboltable.impl;import symboltable.RamClass;import symboltable.RamMethod;import symboltable.RamVariable;import syntaxtree.IdentifierType;import syntaxtree.Type;import java.util.LinkedHashMap;import java.util.LinkedHashSet;import java.util.Map;import java.util.Set;public class RamClassImpl implements RamClass {    private String id;    private Map<String, RamMethod> methods;    private Map<String, RamVariable> globals;    private Type type;    public RamClassImpl(String id) {        this.id = id;        type = new IdentifierType(id);        methods = new LinkedHashMap<>();        globals = new LinkedHashMap<>();    }    public RamClassImpl() {    }    @Override    public String getId() {        return id;    }    @Override    public Type type() {        return type;    }    @Override    public boolean addMethod(String id, Type type) {        if (containsMethod(id)) {            return false;        } else {            methods.put(id, new RamMethodImpl(id, type));            return true;        }    }    @Override    public Set<RamMethod> getMethods() {        return new LinkedHashSet<>(methods.values());    }    @Override    public RamMethod getMethod(String id) {        return methods.get(id);    }    @Override    public int numMethods() {        return methods.size();    }    @Override    public boolean addVar(String id, Type type) {        if (globals.containsKey(id)) {            return false;        } else {            globals.put(id, new RamVariableImpl(id, type));            return true;        }    }    @Override    public RamVariable getVar(String id) {        return globals.get(id);    }    @Override    public Set<RamVariable> getVars() {        return new LinkedHashSet<>(globals.values());    }    @Override    public boolean containsVar(String id) {        return globals.containsKey(id);    }    @Override    public boolean containsMethod(String id) {        return methods.containsKey(id);    }    @Override    public int numGlobals() {        return globals.size();    }    @Override    public String toString() {        StringBuilder sb = new StringBuilder();        sb.append("    ").append(id).append("\n");        sb.append("        Fields:\n");        for (RamVariable v : getVars()) {            sb.append("            ").append(v).append("\n");        }        sb.append("        Methods:\n");        for (RamMethod m : getMethods()) {            sb.append(m);        }        return sb.toString();    }}